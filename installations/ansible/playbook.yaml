---
- name: Run mongodb without authentication and recreate with authentication
  hosts: localhost
  vars:
    - host_port: 21112
    - internal_port: 27017
  tasks:
    - set_fact:
          random_container_name: "{{ query('community.general.random_string', upper=false, numbers=false, special=false)[0] }}MongoDB"

    - name: install mongodb
      community.docker.docker_container:
        name: "{{ random_container_name }}"
        image: mongo:latest
        state: started
        detach: true
        restart_policy: unless-stopped
        published_ports:
          - "{{ host_port }}:{{ internal_port }}"
        volumes:
          - ./{{ random_container_name }}/mongodb:/data
      register: mongo_docker

    - name: Gather all supported information
      community.mongodb.mongodb_info:
        login_port: "{{ host_port }}"
      register: result

    - set_fact:
        mongo_is_running: "{{ mongo_docker.container.State.Running }}"

    - name: "Check"
      debug:
        msg: "{{ result }} {{ random_container_name }} localhost:{{ host_port }}"

    - name: "Check!!!"
      debug:
        msg: "{{ mongo_is_running }} localhost:{{ host_port }}"

    - name: Check container status
      fail:
        msg: "Mongo did not start: {{ mongo_is_running }}"
      when: not mongo_is_running

    - name: Wait for MongoDB web interface to get available
      uri:
        url: "http://localhost:{{ host_port }}"
        method: GET
      register: wait_mongodb_result
      until: wait_mongodb_result is succeeded
      retries: 2
      delay: 3
      changed_when: false

    - name: remove mongodb
      community.docker.docker_container:
        name: "{{ random_container_name }}"
        image: mongo:latest
        state: absent

    - name: install mongodb with authentication
      community.docker.docker_container:
        name: "{{ random_container_name }}2"
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: root2
        image: mongo:latest
        state: started
        detach: true
        restart_policy: unless-stopped
        published_ports:
          - "{{ host_port }}:{{ internal_port }}"
        volumes:
          - ./{{ random_container_name }}/mongodb:/data
      register: mongo_docker2

    - set_fact:
        mongo2_is_running: "{{ mongo_docker2.container.State.Running }}"

    - name: "Check!!!"
      debug:
        msg: "{{ mongo2_is_running }}"

    - name: Check container status
      fail:
        msg: "Mongo did not start: {{ mongo2_is_running }}"
      when: not mongo2_is_running

    - name: Wait for MongoDB web interface to get available
      uri:
        url: "http://localhost:{{ host_port }}"
        method: GET
      register: wait_mongodb2_result
      until: wait_mongodb2_result is succeeded
      retries: 2
      delay: 3
      changed_when: false

    - name: Gather all supported information
      community.mongodb.mongodb_info:
        login_user: root
        login_password: root2
        login_port: "{{ host_port }}"
      register: result2

    - name: "Check"
      debug:
        msg: "{{ result2 }}"
